apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: db-deployment
spec:
  template:
    metadata:
      name: db-pod
      labels:
        app: postgres
    spec:
      containers:
        - image: registry.redhat.io/rhel8/postgresql-13
          name: db-pod
          ports:
            - containerPort: 5432
#          command: ["/bin/sh", "-c"]
#          args: ["cd /; psql -f /docker-entrypoint-initdb.d/init.sql; run-postgresql"]
          envFrom:
            - secretRef:
                name: db-secret
            - configMapRef:
                name: db-configmap
          volumeMounts:
            - name: postgresql-claim0
              mountPath: /var/lib/pgsql/data
            - name: postgresql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgresql-claim0
          persistentVolumeClaim:
            claimName: postgresql-claim0
        - name: postgresql-initdb
          configMap:
            name: postgresql-initdb-config
      imagePullSecrets: 
      - name: regcred
  replicas: 1
  selector:
    matchLabels:
      app: postgres
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-claim0
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-claim0
  labels:
    app: postgres
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  clusterIP: 10.99.138.45
  type: ClusterIP
  ports:
    - targetPort: 5432
      port: 5432

  selector:
    app: postgres
  
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-initdb-config
data:
  init.sql: |
    CREATE TABLE besede (
    id SERIAL PRIMARY KEY,
    word VARCHAR(50)
    );

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-networkpolicy
spec:
  podSelector:
    matchLabels:
      app: postgres
      type: backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: postgres
      ports:
        - port: 5432
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: postgres
      ports:
        - port: 5432
---
